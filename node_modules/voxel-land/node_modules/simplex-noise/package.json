{
  "name": "simplex-noise",
  "version": "2.1.1",
  "description": "simplex-noise is a fast simplex noise implementation in Javascript.",
  "homepage": "https://github.com/jwagner/simplex-noise.js",
  "author": {
    "name": "Jonas Wagner",
    "email": "jonas@29a.ch",
    "url": "http://29a.ch/"
  },
  "main": "./simplex-noise",
  "devDependencies": {
    "tape": "~2.3.2",
    "alea": "0.0.9"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jwagner/simplex-noise.js.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "readme": "# simplex-noise.js\n\nsimplex-noise.js is a fast simplex noise implementation in Javascript. It works in the browser and on nodejs.\n\n## Requirements\n\nIt requires typed arrays, if you want to use it in browsers without support\nyou will need to use a polyfill like [typedarray.js](http://www.calormen.com/polyfill/typedarray.js).\n\n## Demo\nSimple 2D plasma demo on [jsfiddle.net](http://jsfiddle.net/9f8fV/).\nA more complex [3D voxel world generation](http://29a.ch/sandbox/2012/voxelworld/) example\n\n## Usage\n\n```javascript\n// initializing a simplex instance\n// do this only once it's relatively expensive\nvar simplex = new SimplexNoise(),\n    value2d = simplex.noise2D(x, y),\n    value3d = simplex.noise3D(x, y, z),\n    value4d = simplex.noise4D(x, y, z, w);\n```\n\nYou can also pass an alternative random function to the constructor that is\nused to build the permutation table:\n\n```javascript\nvar simplex = new SimplexNoise(Math.random),\n    value2d = simplex.noise2D(x, y);\n```\n\nThis can be used with a PRNG like alea to initialize the noise function with a seed:\n\n```javascript\nvar random = new Alea(seed),\n    simplex = new SimplexNoise(random),\n    value2d = simplex.noise2D(x, y);\n```\n\nThe ALEA PRNG can be found on [npm](https://npmjs.org/package/alea) of course.\n\n## node.js\n\nNode.js is also supported, you can install the package using [npm](https://npmjs.org/package/simplex-noise).\n\n```javascript\nvar SimplexNoise = require('simplex-noise'),\n    simplex = new SimplexNoise(Math.random),\n    value2d = simplex.noise2D(x, y);\n```\n\n## Benchmarks\n\n- [Comparison between 2D and 3D noise](http://jsperf.com/simplex-noise/4)\n- [Comparison with simplex implementation in three.js](http://jsperf.com/simplex-noise-comparison/3)\n\nFor development you can open `perf/index.html` and watch the console or run `node perf/benchmark.js` in a shell.\nThere is also a rake task for comparing your current changes can also run `make compare`.\nThe command works using git stash.\n\n## Tests\n\nThere are some simple buster.js tests for this library to run them first install buster.js and jshint:\n```shell\nnpm install buster\n# if you haven't done so already\nnpm install -g jshint\nmake tests\n```\n\n## Changelog\n\n### master\n- Small performance improvement for 2D noise\n\n### 2.1.1\n- Increased entropy by fixing a little initialization issue.\n\n### 2.1.0\n- AMD support\n\n### 2.0.0\n- Changed node.js api, SimplexNoise is now exported directly.\n- Added unit tests\n\n### 1.0.0\n- Initial Release\n\n## Credits\n\nThis is mostly a direct javascript port of the [Java implementation](http://webstaff.itn.liu.se/~stegu/simplexnoise/SimplexNoise.java)\nby Stefan Gustavson and Peter Eastman.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jwagner/simplex-noise.js/issues"
  },
  "_id": "simplex-noise@2.1.1",
  "dist": {
    "shasum": "0cae3fd455ac1951eab65a4119b0769a002b8044"
  },
  "_resolved": "git://github.com/deathcap/simplex-noise.js.git#eba7c7e7599ef58ac5d7eef7ee81eb2505aac56c",
  "_from": "simplex-noise@git://github.com/deathcap/simplex-noise.js.git#eba7c7e7599ef58ac5d7eef7ee81eb2505aac56c"
}
