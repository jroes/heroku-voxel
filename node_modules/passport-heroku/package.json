{
  "name": "passport-heroku",
  "version": "0.0.2",
  "description": "Heroku authentication strategy for Passport.",
  "keywords": [
    "passport",
    "heroku",
    "auth",
    "authn",
    "authentication",
    "identity"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/mick/passport-heroku.git"
  },
  "bugs": {
    "url": "http://github.com/mick/passport-heroku/issues"
  },
  "author": {
    "name": "Mick Thompson",
    "email": "mick@mick.im",
    "url": "http://mick.im"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib/passport-heroku",
  "dependencies": {
    "pkginfo": "0.2.x",
    "passport-oauth": "0.1.x"
  },
  "devDependencies": {
    "vows": "0.7.x"
  },
  "scripts": {
    "test": "NODE_PATH=lib node_modules/.bin/vows test/*-test.js"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "readme": "# Passport-Heroku\n\n[Passport](http://passportjs.org/) strategy for authenticating with [Heroku](https://heroku.com/)\nusing the OAuth 2.0 API.\n\nThis module lets you authenticate using Heroku in your Node.js applications.\nBy plugging into Passport, Heroku authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-heroku\n\n## Usage\n\n#### Configure Strategy\n\nThe Heroku authentication strategy authenticates users using a Heroku account\nand OAuth 2.0 tokens.  The strategy requires a `verify` callback, which accepts\nthese credentials and calls `done` providing a user, as well as `options`\nspecifying a client ID, client secret, and callback URL.\n\n    passport.use(new HerokuStrategy({\n        client_id: Heroku_CLIENT_ID,\n        client_secret: Heroku_CLIENT_SECRET,\n        callbackURL: \"http://127.0.0.1:3000/auth/heroku/callback\"\n      },\n      function(accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ githubId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'heroku'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/heroku',\n      passport.authenticate('heroku'));\n\n    app.get('/auth/heroku/callback', \n      passport.authenticate('heroku', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n## Examples\n\nFor a complete, working example, refer to the [login example](https://github.com/mick/passport-heroku/tree/master/examples/login).\n\n## Tests\n\n    $ npm install --dev\n    $ make test\n\n[![Build Status](https://secure.travis-ci.org/mick/passport-heroku.png)](http://travis-ci.org/mick/passport-heroku)\n\n## Credits\n\n  - [Mick Thompson](http://github.com/mick)\n  - Based on [passport-github](http://github.com/jaredhanson/passport-github) by [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2013 Mick Thompson <[http://mick.im/](http://mick.im/)>\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/mick/passport-heroku",
  "_id": "passport-heroku@0.0.2",
  "_from": "passport-heroku@0.0.2"
}
